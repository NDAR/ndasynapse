#!/usr/bin/env python

import io
import os
import sys
import json
import logging
import uuid

import requests
import pandas
import boto3
import synapseclient
import ndasynapse

pandas.options.display.max_rows = None
pandas.options.display.max_columns = None
pandas.options.display.max_colwidth = 1000

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

def get_submissions(auth, args):
    submissions = ndasynapse.nda.get_submissions(auth, collectionid=map(str, args.collection_id))
    submissions_processed = ndasynapse.nda.process_submissions(submissions)

    submissions_processed.to_csv(sys.stdout, index=False)

def get_submission(auth, args):
    submission = ndasynapse.nda.get_submission(auth, submissionid=args.submission_id)

    sys.stdout.write(submission)

def get_submission_manifests(auth, config_file, args):
    config = json.load(open(config_file))['nda']
    submissions = ndasynapse.nda.NDASubmission(config=config, collection_id=args.collection_id)
    for submission in submissions.submission_files:
        print('GUIDs from submission {} in collection {}'.
              format(submission['submission_id'],
                     submission['collection_id']))
        for data_file in submission['files'].data_files:
            data_file_as_string = data_file['content'].decode('utf-8')
            if 'genomics_subject' in data_file_as_string:
                subject_data = pandas.read_csv(io.StringIO(data_file_as_string), skiprows=[1])
            if 'genomics_sample' in data_file_as_string:
                sample_data = pandas.read_csv(io.StringIO(data_file_as_string), skiprows=[1])
            if 'nichd_btb' in data_file_as_string:
                nichd_data = pandas.read_csv(io.StringIO(data_file_as_string), skiprows=[1])
        associated_files = pandas.DataFrame.from_dict(submission['files'].associated_files)
        print(associated_files)
        print(subject_data)
        print(sample_data)
        print(nichd_data)

    
def main():

    import argparse
    import json
    
    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose", action="store_true", default=False)
    parser.add_argument("--config", type=str, default=None)

    subparsers = parser.add_subparsers(help='sub-command help')

    parser_get_submissions = subparsers.add_parser('get-submissions', help='Get submissions in NDA collections.')
    parser_get_submissions.add_argument('--collection_id', type=int, nargs="+", help='NDA collection IDs.')
    parser_get_submissions.set_defaults(func=get_submissions)

    parser_get_submission = subparsers.add_parser('get-submission', help='Get an NDA submission.')
    parser_get_submission.add_argument('--submission_id', type=int, nargs="+", help='NDA submission ID.')
    parser_get_submission.set_defaults(func=get_submission)

    args = parser.parse_args()

    logger.info(args.config)
    
    config = json.load(file(args.config))
    auth = ndasynapse.nda.authenticate(config)
    logger.info(auth)
    
    args.func(auth, args)


if __name__ == "__main__":
    main()
